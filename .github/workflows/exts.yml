#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
# 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Get Exts and Loads

on:
  schedule:
    - cron: '0 0 * * *'

  workflow_dispatch:

jobs:
  exts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Initialization environment
        run : |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo apt install build-essential libtool pkgconf libzstd-dev liblzma-dev libssl-dev
          pip install requests BeautifulSoup4


      - name: Checkout redpill-load s
        run: |
          sudo rm -rf redpill-load_pocopico_develop
          git clone --branch develop https://github.com/pocopico/redpill-load.git redpill-load_pocopico_develop

          sudo rm -rf redpill-load_pocopico_jun
          git clone --branch jun https://github.com/pocopico/redpill-load.git redpill-load_pocopico_jun

          sudo rm -rf redpill-load_jumkey_develop
          git clone --branch develop https://github.com/jumkey/redpill-load.git redpill-load_jumkey_develop

          sudo rm -rf redpill-load_PeterSuh-Q3_master
          git clone --branch master https://github.com/PeterSuh-Q3/redpill-load.git redpill-load_PeterSuh-Q3_master

          sudo rm -rf redpill-load_wjz304_test-dev
          git clone --branch test-dev https://github.com/wjz304/redpill-load.git redpill-load_wjz304_test-dev

          sudo rm -rf redpill-load_wjz304_test-jun
          git clone --branch test-jun https://github.com/wjz304/redpill-load.git redpill-load_wjz304_test-jun

      - name: Get loads lsit
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import os, json

          root = '' # os.path.dirname(os.path.abspath(__file__))

          def getloadlist(work = 'redpill-load', ignore=[]):
              load = {}
              try:
                  models = os.listdir(os.path.join(root, work, 'config'))
                  models.sort()
                  print(models)
                  for model in models:
                      if model.startswith('.') or model.startswith('_'):
                          continue
                      if os.path.isdir(os.path.join(root, work, 'config', model)):
                          versions = os.listdir(os.path.join(root, work, 'config', model))
                          versions.sort()
                          print(versions)
                          for version in versions:
                              if version in ignore:
                                  continue
                              if os.path.exists(os.path.join(root, work, 'config', model, version, 'config.json')):
                                  if model not in load:
                                      load[model] = []
                                  load[model].append(version)

              except Exception as err:
                  print(err)
              return load

          if __name__ == '__main__':
              loads = {}
              ignore=['7.0-41222', '7.0-41890', '7.1-42550', '7.1-42661', '7.1.0-42550', '7.1.0-42621', '7.1.1-42951']

              print('################### pocopico_develop ###################')
              loads["pocopico_develop"] = getloadlist('redpill-load_pocopico_develop', ignore)

              print('##################### pocopico_jun #####################')
              loads["pocopico_jun"] = getloadlist('redpill-load_pocopico_jun', ignore)

              print('#################### jumkey_develop ####################')
              loads["jumkey_develop"] = getloadlist('redpill-load_jumkey_develop', ignore)

              print('################## PeterSuh-Q3_master ##################')
              loads["PeterSuh-Q3_master"] = getloadlist('redpill-load_PeterSuh-Q3_master', ignore)

              print('################## wjz304_test-dev ##################')
              loads["wjz304_test-dev"] = getloadlist('redpill-load_wjz304_test-dev', ignore)

              print('################## wjz304_test-jun ##################')
              loads["wjz304_test-jun"] = getloadlist('redpill-load_wjz304_test-jun', ignore)

              if len(loads) > 0:
                  print('#######################  loads   #######################')
                  print(json.dumps(loads, indent=4))
                  with open(os.path.join(root, 'docs/loads.json'), 'w', encoding='utf-8') as f:
                      f.write(json.dumps(loads, indent=4))


      - name: Get models and pats lsit
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import os, re, json, requests
          from bs4 import BeautifulSoup
          
          root = '' # os.path.dirname(os.path.abspath(__file__))

          if __name__ == '__main__':

              # models
              models=[]
              req = requests.get('https://kb.synology.com/en-us/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have')
              req.encoding = 'utf-8'
              bs=BeautifulSoup(req.text, 'html.parser')
              p = re.compile(r"data: (.*?),$", re.MULTILINE | re.DOTALL)
              data = json.loads(p.search(bs.find('script', string=p).prettify()).group(1))

              model='(.*?)'  # (.*?): all, FS6400: one
              p = re.compile(r"\n\t\t\t<td>{}<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t".format(model), re.MULTILINE | re.DOTALL)
              it = p.finditer(data["preload"]["content"])
              for i in it:
                  d = i.groups()
                  if len(d) == 6: d = model + d
                  models.append({"Model":d[0],"CPU Model":d[1],"Cores":d[2],"Threads":d[3],"FPU":d[4],"PackageArch":d[5].lower(),"RAM":d[6]})

              print(json.dumps(models, indent=4))
              with open(os.path.join(root, 'docs/models.json'), 'w', encoding='utf-8') as f:
                  f.write(json.dumps(models, indent=4))


              # pats
              pats = {}
              req = requests.get('https://archive.synology.cn/download/Os/DSM')
              req.encoding = 'utf-8'
              bs=BeautifulSoup(req.text, 'html.parser')
              p = re.compile(r"(.*?)-(.*?)", re.MULTILINE | re.DOTALL)
              l = bs.find_all('a', string=p)
              for i in l:
                  ver = i.attrs['href'].split('/')[-1]
                  if not any([ver.startswith('6.2.4'), ver.startswith('7')]): continue
                  req = requests.get('https://archive.synology.cn{}'.format(i.attrs['href']))
                  req.encoding = 'utf-8'
                  bs=BeautifulSoup(req.text, 'html.parser')
                  p = re.compile(r"^(.*?)_(.*?)_(.*?).pat$", re.MULTILINE | re.DOTALL)
                  data = bs.find_all('a', string=p)
                  for item in data:
                      p = re.compile(r"DSM_(.*?)_(.*?).pat", re.MULTILINE | re.DOTALL)
                      rels = p.search(item.attrs['href'])
                      if rels != None:
                          info = p.search(item.attrs['href']).groups()
                          model = info[0].replace('%2B', '+')
                          if model not in pats.keys(): pats[model]={}
                          pats[model][ver] = item.attrs['href']
  
              req = requests.get('https://prerelease.synology.cn/webapi/models?event=dsm72_beta')
              rels = json.loads(req.text)
              if "models" in rels and len(rels["models"]) > 0:
                  for i in rels["models"]:
                      if "name" not in i or "dsm" not in i: continue
                      if i["name"] not in pats.keys(): pats[i["name"]]={}
                      pats[i["name"]][i["dsm"]["version"]] = i["dsm"]["url"].split('?')[0]
                    
              print(json.dumps(pats, indent=4))
              with open(os.path.join(root, 'docs/pats.json'), 'w', encoding='utf-8') as f:
                  f.write(json.dumps(pats, indent=4))

      - name: Get kernelvers lsit
        run: |
          function fullversion() {
            local out=$1
            local arr=(${1//-/ })
            if [ ${#arr[@]} -gt 0 ]; then
              local vers=(${arr[0]//./ })
              a=`[ ${#vers[@]} -gt 0 ] && echo ${vers[0]} || echo "0"`
              b=`[ ${#vers[@]} -gt 1 ] && echo ${vers[1]} || echo "0"`
              c=`[ ${#vers[@]} -gt 2 ] && echo ${vers[2]} || echo "0"`
              d=`[ ${#arr[@]} -gt 1 ] && echo ${arr[1]} || echo "00000"`
              e=`[ ${#arr[@]} -gt 2 ] && echo ${arr[2]} || echo "0"`
              out="${a}.${b}.${c}-${d}-${e}"
            fi
            echo ${out}
          }

          function synoextractor() {
            if [ $# -ge 2 ]; then
              filename=${2}
              [[ ! ${filename} =~ .pat$ ]] && filename="${filename}.pat"
            else
              filename=${1}
              filename=${filename##*\/}
              filename=${filename%%\?*}
            fi

            curl -#kL "$1" -o ${filename}

            header="$(od -bcN2 ${filename} | head -1 | awk '{print $3}')"
            case ${header} in
              105)
                echo "Uncompressed tar"
                isencrypted="no"
                ;;
              213)
                echo "Compressed tar"
                isencrypted="no"
                ;;
              255)
                echo "Encrypted"
                isencrypted="yes"
                ;;
              *)
                echo "error"
                return 1
                ;;
            esac

            [ -d "${filename%%\.*}" ] && rm -rf "${filename%%\.*}"
            mkdir -p "${filename%%\.*}"

            if [ "${isencrypted}" = "yes" ]; then
              sudo $GITHUB_WORKSPACE/syno-extractor.sh "${filename}" "${filename%%\.*}"
            else
              tar -xf "${filename}" -C "${filename%%\.*}" >/dev/null 2>&1
            fi
            rm -f ${filename}
          }

          chmod +x $GITHUB_WORKSPACE/syno-extractor.sh

          JSON=docs/kernelvers.json
          [ ! -f ${JSON} ] && echo -e '{}' > ${JSON}
          models=(`jq -r '. | keys | tostring' $GITHUB_WORKSPACE/docs/pats.json | cut -d '[' -f2 | cut -d ']' -f1 | sed 's/,/ /g' | sed 's/\"//g'`)
          echo ${models[@]}
          for model in ${models[@]}
          do
            [ `jq -r --arg model "${model}" '.[] | has($model)' $GITHUB_WORKSPACE/docs/loads.json 2>/dev/null | grep -E 'true' | wc -l` -eq 0 ] && continue 1
            synoarch=$(jq -r --arg model "${model}" '. | map(select(.Model == $model)) | .[].PackageArch' $GITHUB_WORKSPACE/docs/models.json)
            [ -z "${synoarch}" ] && continue 1
            [ "false" == "`jq -r --arg arch ${synoarch} '. | has($arch)' ${JSON}`" ] && echo -e "`jq -r --arg arch ${synoarch} '.[$arch] = {}' ${JSON}`" > ${JSON}
            vers=(`jq -r --arg model ${model} '.[$model] | keys | tostring' $GITHUB_WORKSPACE/docs/pats.json | cut -d '[' -f2 | cut -d ']' -f1 | sed 's/,/ /g' | sed 's/\"//g'`)

            for ver in ${vers[@]}
            do
              fullver=`fullversion ${ver}`
              fullver=${fullver%\-*}
              [ "true" == "`jq -r --arg arch ${synoarch} --arg fullver ${fullver} '.[$arch] | has($fullver)' ${JSON}`" ] && continue 1
              url=`jq -r --arg model ${model} --arg ver ${ver} '.[$model][$ver]' $GITHUB_WORKSPACE/docs/pats.json`
              synoextractor ${url} DSM
              if [ -f DSM/zImage ]; then
                kernelver=`file "DSM/zImage" | awk '{printf $9}' | sed 's/+//g'`
                echo -e "`jq -r --arg arch ${synoarch} --arg fullver ${fullver} --arg kernelver ${kernelver} '.[$arch][$fullver] = $kernelver' ${JSON}`" > ${JSON}
                echo "${model} -- ${synoarch} -- ${fullver} -- ${url} -- ${kernelver}"
              fi
              sudo rm -rf DSM
            done
          done


      - name: Check and Push
        run: |
          git pull
          status=$(git status -s | grep -E 'loads.json|models.json|pats.json|kernelvers.json' | awk '{printf " %s", $2}')
          if [ -n "${status}" ]; then
            git add ${status}
            git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
            git push -f
          fi
